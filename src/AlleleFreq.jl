"""
    allelefreq(data::PopData)
Return a NamedTuple of `Dicts` of allele frequencies of all
loci in a `PopData` object. These are global allele frequencies.
"""
function allelefreq(data::PopData)
    NamedTuple{Tuple(Symbol.(loci(data)))}(
            DataFrames.combine(
            groupby(data.genodata, :locus),
            :genotype => allelefreq => :frq
        )[:, :frq] |> Tuple
    )
end

"""
    allelefreq(locus::GenoArray)
Return a `Dict` of allele frequencies of a GenoArray (typically a single locus) in 
a `PopData` object.
"""
@inline function allelefreq(locus::GenoArray)
    isallmissing(locus) && return Dict{eltype(nonmissingtype(eltype(locus))), Float64}()
    proportionmap(alleles(locus))
end


"""
    allelefreq(geno::Genotype)
Return a `Dict` of allele frequencies of the alleles within a single Genotype in a `PopData`
object.
"""
@inline function allelefreq(geno::Genotype)
    d = Dict{eltype(geno),Float32}()
    len = length(geno)
    @inbounds @simd for allele in geno
        d[allele] = @inbounds get!(d, allele, 0.0) + 1.0/len
    end
    return d
end

"""
    allelefreq_vec(locus::GenoArray)
Return a Vector of allele frequencies of a single locus in a `PopData`
object. Similar to `allelefreq()`, except it returns only the frequencies,
without the allele names, meaning they can be in any order. This is useful
for getting the expected genotype frequencies.
"""
@inline function allelefreq_vec(locus::GenoArray)
    flat_alleles = alleles(locus)
    len = length(flat_alleles)
    [count(==(j), flat_alleles)/len for j in unique(flat_alleles)]
end

@inline function allelefreq_vec(::Missing)
    return missing
end


"""
    avg_allelefreq(allele_dicts::AbstractVector{Dict{T, Float64}}, power::Int = 1)
Takes a Vector of Dicts generated by `allelefreq` and returns a Dict of the average
allele frequencies raised to the `power` (exponent) specified (default: `1`). 
This is typically done to calculate average allele frequencies across populations.

**Example**
```
cats = @nancycats;
alleles_df = DataFrames.combine(
    groupby(cats.genodata, [:locus, :population]),
    :genotype => allelefreq => :alleles
);
DataFrames.combine(
    groupby(alleles_df, :locus),
    :alleles => (i -> sum(avg_allelefreq(i, 2))) => :avg_freq
)
```
"""
function avg_allelefreq(allele_dicts::AbstractVector{Dict{T, Float64}}, power::Int = 1) where T<:Integer   
    sum_dict = Dict{T, Tuple{Float64, Int}}()
    # ignore any dicts with no entries (i.e. from a group without that locus)
    @inbounds for frqdict in Base.Iterators.filter(!isempty, allele_dicts)
        # populate the sum dict with allele frequency and n+1 for each allele
        @inbounds for (allele, freq) in pairs(frqdict)
            @inbounds sum_dict[allele] = get!(sum_dict, allele, (0.0, 0)) .+ (freq, 1)
        end
    end
    avg_dict = Dict{T, Float64}()
    # collapse the sum dict into a dict of averages
    @inbounds for (key, value) in pairs(sum_dict)
        @inbounds freq_sum, n = value
        avg = (freq_sum / n) ^ power
        @inbounds avg_dict[key] = avg
        #= drop zeroes
        if !iszero(avg)
            @inbounds avg_dict[key] = avg
        end
        =#
    end
    return avg_dict
 end

# method for nei_fst (pairwise)
function avg_allelefreq(allele_dicts::NTuple{N,Dict{T, Float64}}, power::Int = 1) where N where T<:Union{Int8, Int16}
    sum_dict = Dict{T, Tuple{Float64, Int}}()
    # ignore any dicts with no entries (i.e. from a group without that locus)
    @inbounds for frqdict in Base.Iterators.filter(!isempty, allele_dicts)
        # populate the sum dict with allele frequency and n+1 for each allele
        @inbounds for (allele, freq) in pairs(frqdict)
            @inbounds sum_dict[allele] = get!(sum_dict, allele, (0.0, 0)) .+ (freq, 1)
        end
    end
    avg_dict = Dict{T, Float64}()
    # collapse the sum dict into a dict of averages
    @inbounds for (key, value) in pairs(sum_dict)
        @inbounds freq_sum, n = value
        avg = (freq_sum / n) ^ power
        @inbounds avg_dict[key] = avg
        #= drop zeroes
        if !iszero(avg)
            @inbounds avg_dict[key] = avg
        end
        =#
    end
    return avg_dict
 end


"""
    allelefreq(data::PopData, locus::String; population::Bool = false)
Return a `Dict` of allele frequencies of a single locus in a `PopData`
object. Use `population = true` to return a table of allele frequencies
of that locus per population.
### Example
```
cats = @nancycats;
allelefreq(cats, "fca8")
allelefreq(cats, "fca8", population = true)
```
"""
function allelefreq(data::PopData, locus::String; population::Bool=false)
    if !population
        data.genodata[data.genodata.locus .== locus, :genotype] |> allelefreq
    else
        tmp = groupby(data.genodata[data.genodata.locus .== locus, :], :population)
        DataFrames.combine(tmp, :genotype => allelefreq => :frequency)
    end
end


#TODO swtich order of args do it's data, allele?
# Does doing that break anything?
"""
    allelefreq(genos::GenoArray, allele::Int)
Return the frequency of a specific `allele` from a vector of `genotypes`.

### Example
```
ncats = @nancycats;
ncats_sub = ncats[(ncats.genodata.locus .== "fca8") .& (ncats.genodata.genotype .!== missing)] 
pop_grp = groupby(ncats_sub, :population)
DataFrames.combine(pop_grp, :genotype => (geno -> allelefreq(137, geno)) => :freq_137)
```
"""
function allelefreq(genos::T, allele::Int) where T<:GenoArray
    get(allelefreq(genos), allele, 0.0)
end